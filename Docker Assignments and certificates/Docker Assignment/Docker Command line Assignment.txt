Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. Type "docker -v" to check if it's installed.

ans:  docker -v
      Docker version 20.10.7, build f0df350

      docker --help

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\Dell\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\Dell\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\Dell\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\Dell\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  buildx*     Build with BuildKit (Docker Inc., v0.5.1-docker)
  compose*    Docker Compose (Docker Inc., v2.0.0-beta.6)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., v0.8.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

To get more help with docker, check out our guides at https://docs.docker.com/go/guides/

       docker image --help
Usage:  docker image COMMAND

Manage images

Commands:
  build       Build an image from a Dockerfile
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Display detailed information on one or more images
  load        Load an image from a tar archive or STDIN
  ls          List images
  prune       Remove unused images
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rm          Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE

Run 'docker image COMMAND --help' for more information on a command.

       docker container --help

Usage:  docker container COMMAND

Manage containers

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  inspect     Display detailed information on one or more containers
  kill        Kill one or more running containers
  logs        Fetch the logs of a container
  ls          List containers
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  prune       Remove all stopped containers
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  run         Run a command in a new container
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker container COMMAND --help' for more information on a command.


2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub

ans:  docker pull nginx

Using default tag: latest
latest: Pulling from library/nginx
33847f680f63: Pull complete
dbb907d5159d: Pull complete
8a268f30c42a: Pull complete
b10cf527a02d: Pull complete
c90b090c213b: Pull complete
1f41b2f2bf94: Pull complete
Digest: sha256:8f335768880da6baf72b70c701002b45f4932acae8d574dedfddaf967fc3ac90
Status: Downloaded newer image for nginx:latest
docker.io/library/nginx:latest

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.

ans: docker images

REPOSITORY   TAG       IMAGE ID       CREATED      SIZE
nginx        latest    08b152afcfae   7 days ago   133MB

4. Find out the "Full" ImageId of the image that you pulled and write it below.

ans: docker images -q

     08b152afcfae

     docker inspect 08b152afcfae
     
     "Id": "sha256:08b152afcfae220e9709f00767054b824361c742ea03a9fe936271ba520a0a4b"

5. Create a container of your image

ans:  docker run -d -p 8080:80 --name My-Nginx  08b152afcfae
      
      81487d63756c8b3bac0c2f18ff9e1396055466d80a7229ebe017a2b20c0a8c31

6. List all the running containers

ans:   docker ps
     
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                   NAMES
81487d63756c   08b152afcfae   "/docker-entrypoint.…"   57 seconds ago   Up 51 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp   My-Nginx

7. List all the running and stopped containers

ans: docker ps -a

CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                   NAMES
81487d63756c   08b152afcfae   "/docker-entrypoint.…"   2 minutes ago   Up 2 minutes   0.0.0.0:8080->80/tcp, :::8080->80/tcp   My-Nginx

8. Find out the "Full" containerId of the container and write it below.

ans: docker inspect 81487d63756c

    "Id": "81487d63756c8b3bac0c2f18ff9e1396055466d80a7229ebe017a2b20c0a8c31"

9. Find out how many image layers are used to build this image.

ans: docker inspect 08b152afcfae

   "Layers": [
                "sha256:814bff7343242acfd20a2c841e041dd57c50f0cf844d4abd2329f78b992197f4",
                "sha256:7c0b223167b96d7deaacf1e1d2d35892166645b09b17bcc8675a4d882ef84893",
                "sha256:59b01b87c9e7f668b740d23eb872c5964636c33aef795f1186f08b172197bc35",
                "sha256:988d9a3509bbb7ea8037d4eba3a5e0ada5dc165144c8ff0df89c0048d1ac6132",
                "sha256:b857347059916922b353147882544f17bb96e64c639081c0677bf386c446be4f",
                "sha256:e3135447ca3e69c6975aee1621c406e3865e0e143c807bbdcf05abefa56054a2"
            ]

10. Get the Apache Tomcat 7 server image from the docker hub.

ans: docker pull tomcat:7.0

7.0: Pulling from library/tomcat
0bc3020d05f1: Pull complete
a110e5871660: Pull complete
83d3c0fa203a: Pull complete
a8fd09c11b02: Pull complete
96ebf1506065: Pull complete
26b72ffca293: Pull complete
0bffa2ea17aa: Pull complete
d880cebcc7a6: Pull complete
d19ab8039b36: Pull complete
5057492dc495: Pull complete
Digest: sha256:f7d37d248d0eacec1e5995736234c9c22155626fcb27ea3ead13b9db24e698f7
Status: Downloaded newer image for tomcat:7.0
docker.io/library/tomcat:7.0

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.

ans: docker run -it -p 8085:8080 --name Mytomcat 9dfd74e6bc2f

Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /usr/local/openjdk-8
Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar
Using CATALINA_OPTS:
Jul 30, 2021 4:59:42 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Server version name:   Apache Tomcat/7.0.109
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Server built:          Apr 22 2021 18:43:38 UTC
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Server version number: 7.0.109.0
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: OS Name:               Linux
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: OS Version:            5.10.16.3-microsoft-standard-WSL2
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Architecture:          amd64
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Java Home:             /usr/local/openjdk-8/jre
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: JVM Version:           1.8.0_292-b10
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: JVM Vendor:            Oracle Corporation
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: CATALINA_BASE:         /usr/local/tomcat
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: CATALINA_HOME:         /usr/local/tomcat
Jul 30, 2021 4:59:43 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties......

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on

ans:  docker inspect Mytomcat : http://192.168.42.122:8080/

13. Which Port it is using?

ans: "HostPort": "8085"

14. Try to access the Tomcat's home page from your machine/vm.

ans: It is done 
http://192.168.42.122:8085


15. What is the disk size of Apache Tomcat image?

ans: 532.92 MB

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?

ans:     "Env": [
                "PATH=/usr/local/tomcat/bin:/usr/local/openjdk-8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "JAVA_HOME=/usr/local/openjdk-8",
                "LANG=C.UTF-8",
                "JAVA_VERSION=8u292",
                "CATALINA_HOME=/usr/local/tomcat",
                "TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib",
                "LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib",
 "GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23",
                "TOMCAT_MAJOR=7",
                "TOMCAT_VERSION=7.0.109",
                "TOMCAT_SHA512=612e830913bf1401bc9540e2273e465b0ee7ef63750a9969a80f1e9da9edb4888aa621fcc6fa5ba23cff94a40e91eb97e3f969b8064dabd49b2d0ea29e59b57e"
            ]

17. Find out which port is exposed for tomcat?

ans: 8085

18. Run multiple containers of tomcat on different port and access it's home page.

ans: It's done.

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.

ans: docker pull ubuntu:18.04

18.04: Pulling from library/ubuntu
feac53061382: Pull complete
Digest: sha256:7bd7a9ca99f868bf69c4b6212f64f2af8e243f97ba13abb3e641e03a7ceb59e8
Status: Downloaded newer image for ubuntu:18.04
docker.io/library/ubuntu:18.04

    docker pull ubuntu:20.04
20.04: Pulling from library/ubuntu
16ec32c2132b: Pull complete
Digest: sha256:82becede498899ec668628e7cb0ad87b6e1c371cb8a1e597d83a47fac21d6af3
Status: Downloaded newer image for ubuntu:20.04
docker.io/library/ubuntu:20.04

20. Run the container of ubuntu in attached mode.

ans: docker run -it --name MyUbuntu1 ubuntu:18.04
     
21. Run the container of another ubuntu in detached mode.

ans: docker run -it --name MyUbuntu2 ubuntu:20.04 

22. Check how many ubuntu containers are running and stopped.

ans: MyUbuntu2 is running and MyUbuntu1 is stopped

23. Is the tomcat container running? If no, start one.

ans: docker start Mytomcat
     
     Mytomcat

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).

ans: docker logs Mytomcat

Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /usr/local/openjdk-8
Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar
Using CATALINA_OPTS:
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Server version name:   Apache Tomcat/7.0.109
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Server built:          Apr 22 2021 18:43:38 UTC
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Server version number: 7.0.109.0
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: OS Name:               Linux
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: OS Version:            5.10.16.3-microsoft-standard-WSL2
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Architecture:          amd64
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Java Home:             /usr/local/openjdk-8/jre
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: JVM Version:           1.8.0_292-b10
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: JVM Vendor:            Oracle Corporation
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: CATALINA_BASE:         /usr/local/tomcat
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: CATALINA_HOME:         /usr/local/tomcat
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties
Jul 30, 2021 5:51:26 AM org.apache.catalina.startup.VersionLoggerListener log
INFO: Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager....

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.

ans: docker start MyUbuntu1
     MyUbuntu1

     C:\Users\Dell>docker exec -it MyUbuntu1 bash
     root@78567dc80a38:/#

26. Login as root user in ubuntu container

ans: logged in

    docker exec -it MyUbuntu1 bash
    root@78567dc80a38:/# ls
    bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
    root@78567dc80a38:/# cd dev

27. Create a file with any name in root directory

ans: touch Navya1

root@78567dc80a38:/# touch Navya1
root@78567dc80a38:/# ls
Navya1  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var 

28. Install software of your choice in ubuntu container using "apt-get install"

ans: apt-get install

root@78567dc80a38:/# apt-get update
Get:1 http://archive.ubuntu.com/ubuntu bionic InRelease [242 kB]
Get:2 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]
Get:3 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]
Get:4 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]
Get:5 http://archive.ubuntu.com/ubuntu bionic/main amd64 Packages [1344 kB]
Get:6 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [505 kB]
Get:7 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [2258 kB]
Get:8 http://archive.ubuntu.com/ubuntu bionic/restricted amd64 Packages [13.5 kB]
Get:9 http://archive.ubuntu.com/ubuntu bionic/universe amd64 Packages [11.3 MB]
Get:10 http://security.ubuntu.com/ubuntu bionic-security/multiverse amd64 Packages [26.7 kB]
Get:11 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1420 kB]
Get:12 http://archive.ubuntu.com/ubuntu bionic/multiverse amd64 Packages [186 kB]
Get:13 http://archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 Packages [33.6 kB]
Get:14 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [537 kB]
Get:15 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [2694 kB]
Get:16 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2194 kB]
Get:17 http://archive.ubuntu.com/ubuntu bionic-backports/main amd64 Packages [11.3 kB]
Get:18 http://archive.ubuntu.com/ubuntu bionic-backports/universe amd64 Packages [11.4 kB]
Fetched 23.1 MB in 46s (497 kB/s)
Reading package lists... Done
     
       apt-get install java
Reading package lists... Done
Building dependency tree
Reading state information... Done

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.

ans: exit

30. Check if the ubuntu container is running.

ans: Yes, it is running.

31. Create a new ubuntu container out of the same image as that previous container in attached mode.

ans:  docker run -it --name MyUbuntu3 ubuntu:18.04

32. Login as a root user

ans: Yes, logged in

root@6f0485de3b38:/#

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.

ans: No, It is not visible.

     ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
    
     docker kill MyUbuntu3
     MyUbuntu3

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.

ans: Yes, I have.

35. Create an Image out of the existing container.

ans: docker commit 78567dc80a38 navya291195/ubuntu-mod:1.0
sha256:31f0b076c3049814cc8f90b01ab5e5447c8bd00e312764a0c2bbc62a75f34161

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.

ans: docker run -it --name Navya navya291195/ubuntu-mod:1.0
root@096947f9d883:/# ls
Navya1  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

Yes, the previous created file is existing.

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.

ans: Yes.
docker stop Mytomcat
Mytomcat
docker rm Mytomcat
Mytomcat

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.

ans: docker build -t navya/html 
     docker run -d -p 8085:8080 --name index navya/html
     now check on localhost:8085/sample/index.html
http://192.168.42.122:8085/sample/index.html
    This is tomcat container
39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.

ans: docker images --help

Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]

List images

Options:
  -a, --all             Show all images (default hides intermediate images)
      --digests         Show digests
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print images using a Go template
      --no-trunc        Don't truncate output
  -q, --quiet           Only show image IDs

docker images -a     (--all             Show all images)
REPOSITORY               TAG       IMAGE ID       CREATED          SIZE
navya291195/ubuntu-mod   1.0       31f0b076c304   20 minutes ago   100MB
ubuntu                   20.04     1318b700e415   3 days ago       72.8MB
ubuntu                   18.04     39a8cfeef173   3 days ago       63.1MB
nginx                    latest    08b152afcfae   8 days ago       133MB
tomcat                   7.0       9dfd74e6bc2f   3 weeks ago      533MB

docker images -f        /--format string  (displays formated in go template)
docker images -q       ( to display image Id's)
31f0b076c304
1318b700e415
39a8cfeef173
08b152afcfae
9dfd74e6bc2f

40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

ans: docker ps --help

Usage:  docker ps [OPTIONS]

List containers

Options:
  -a, --all             Show all containers (default shows just running)
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print containers using a Go template
  -n, --last int        Show n last created containers (includes all
                        states) (default -1)
  -l, --latest          Show the latest created container (includes all
                        states)
      --no-trunc        Don't truncate output
  -q, --quiet           Only display container IDs
  -s, --size            Display total file sizes

docker ps -a  /--all  (displays all containers)
CONTAINER ID   IMAGE                        COMMAND                  CREATED             STATUS                        PORTS                                   NAMES
096947f9d883   navya291195/ubuntu-mod:1.0   "bash"                   24 minutes ago      Up 24 minutes                                                         Navya
6f0485de3b38   ubuntu:18.04                 "bash"                   43 minutes ago      Exited (137) 35 minutes ago                                           MyUbuntu3
00d8805dd579   ubuntu:18.04                 "bash"                   About an hour ago   Up About an hour                                                      admiring_mestorf
222f5e865a3c   ubuntu:20.04                 "bash"                   2 hours ago         Up 2 hours                                                            MyUbuntu2
78567dc80a38   ubuntu:18.04                 "bash"                   2 hours ago         Up About an hour                                                      MyUbuntu1
81487d63756c   08b152afcfae                 "/docker-entrypoint.…"   25 hours ago        Exited (255) 24 hours ago     0.0.0.0:8080->80/tcp, :::8080->80/tcp   My-Nginx

docker ps -l  /--latest   (shows latest containers)
CONTAINER ID   IMAGE                        COMMAND   CREATED          STATUS          PORTS     NAMES
096947f9d883   navya291195/ubuntu-mod:1.0   "bash"    26 minutes ago   Up 26 minutes             Navya

docker ps -q  /--quiet   (displays onlt image id)
096947f9d883
00d8805dd579
222f5e865a3c
78567dc80a38

docker ps -s  /--size     (displays total file size)
CONTAINER ID   IMAGE                        COMMAND   CREATED             STATUS             PORTS     NAMES              SIZE
096947f9d883   navya291195/ubuntu-mod:1.0   "bash"    28 minutes ago      Up 28 minutes                Navya              78B (virtual 100MB)
00d8805dd579   ubuntu:18.04                 "bash"    About an hour ago   Up About an hour             admiring_mestorf   0B (virtual 63.1MB)
222f5e865a3c   ubuntu:20.04                 "bash"    2 hours ago         Up 2 hours                   MyUbuntu2          0B (virtual 72.8MB)
78567dc80a38   ubuntu:18.04                 "bash"    2 hours ago         Up About an hour             MyUbuntu1          37.1MB (virtual 100MB)

docker ps -f  /--format string   (displays formated in go template)

docker ps -n -1 / --last int        Show n last created containers (includes all states) (default -1)

CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES
d02f8dbca03e   tomcat:latest   "catalina.sh run"   34 minutes ago   Up 34 minutes   0.0.0.0:8085->8080/tcp, :::8085->8080/tcp   stoic_proskuriakova

--------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
      <<<<<<<<<<END>>>>>>>>>>>











