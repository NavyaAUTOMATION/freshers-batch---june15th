Adding Maps and Lookups in your Terraform files
The lab files can be found @ https://github.com/satyensingh/terraform-assignment-resources.git
In the repo you will find main.tf, outputs.tf, and variables.tf.
Add a new variable called env. Set a description to “env: dev or prod”.
Convert the type from image_name to map.

Change the default to use key/value pairs. Set dev to ghost:latest and prod to ghost:alpine.

Convert container_name to a map. Change the default to use key/value pairs. Set dev to blog_dev and prod to blog_prod.

Convert ext_port to a map. Change the default to use key/value pairs. Set dev to 8080 and prod to 80.

Now initialize Terraform.

Setup the Development environment
Create a workspace called dev.
Generate a Terraform plan. Output the plan and call it tfdev_plan. Pass in a variable called env and set it to dev.
Apply tfdev_plan.

Setup the Production environment
Create a workspace called prod.
Generate a Terraform plan. Output the plan and call it tfprod_plan. Pass in a variable called env and set it to prod.
Apply tfprod_plan.

Verify both environments work
Open a browser and navigate to the public IP. This should pull up the production environment.
Open a browser tab and navigate to the public IP on port 8080. This should pull up the development environment.


Solution:

*********************main.tf**************************
terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "2.15.0"
    }
  }
}
provider "docker" {
  host = "npipe:////.//pipe//docker_engine"
}

# Download the latest Ghost Image
resource "docker_image" "image_id" {
  name = var.image_name[var.env]
}

# Start the Container
resource "docker_container" "container_id" {
  name  = var.container_name[var.env]
  image = docker_image.image_id.latest
  ports {
    internal = 2368
    external = var.ext_port[var.env]
  }
}

************************variables.tf**************************
variable "env" {
  description = "env: dev or prod"
}

variable "image_name" {
  description = "Image for container."
  type = map
  default = {
    dev = "ghost:latest"
    prod = "ghost:alpine"
  }
}

variable "container_name" {
  description = "Name of the container."
  type = map
  default = {
    dev = "blog_dev"
    prod = "blog_prod"
  }
}

variable "ext_port" {
  description = "External port for container."
  type = map
  default = {
    dev = 8080
    prod = 80
  }
}

******************************outputs.tf***************************

#Output the IP Address of the Container
output "ip_address" {
  value       = docker_container.container_id.ip_address
  description = "The IP for the container."
}

output "container_name" {
  value       = docker_container.container_id.name
  description = "The name of the container."
}



Dell@DESKTOP-HOURH7G MINGW64 ~/Desktop/DevOps_Assignments Navya Datla/Terraform Assignment/Terraform_assignment_3 (master)
$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "2.15.0"...
- Installing kreuzwerker/docker v2.15.0...
- Installed kreuzwerker/docker v2.15.0 (self-signed, key ID BD080C4571C6104C)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!


Dell@DESKTOP-HOURH7G MINGW64 ~/Desktop/DevOps_Assignments Navya Datla/Terraform Assignment/Terraform_assignment_3 (master)
$ terraform plan -out "tfdev_plan.tfplan"
var.env
  env: dev or prod

  Enter a value: dev

Dell@DESKTOP-HOURH7G MINGW64 ~/Desktop/DevOps_Assignments Navya Datla/Terraform Assignment/Terraform_assignment_3 (master)
$ terraform apply "tfdev_plan.tfplan"
docker_image.image_id: Creating...
docker_image.image_id: Creation complete after 1s [id=sha256:b05a58075ef6ad79016adb818a0a0b65097dfc58781e6eb6ab272fd32d976db9ghost:latest]
docker_container.container_id: Creating...

Dell@DESKTOP-HOURH7G MINGW64 ~/Desktop/DevOps_Assignments Navya Datla/Terraform
$ terraform plan -out "tfprod_plan.tfplan"
var.env
  env: dev or prod

  Enter a value: prod

Dell@DESKTOP-HOURH7G MINGW64 ~/Desktop/DevOps_Assignments Navya Datla/Terraform Assignment/Terraform_assignment_3 (master)
$ terraform apply "tfprod_plan.tfplan"
docker_image.image_id: Modifying... [id=sha256:b05a58075ef6ad79016adb818a0a0b65097dfc58781e6eb6ab272fd32d976db9ghost:latest]
docker_image.image_id: Modifications complete after 0s [id=sha256:cf0dc2177a49d260a09e2a47271d49f4d25b7daf9493abc2ffbe43d21f776c17ghost:alpine]

